@using Microsoft.Extensions.DependencyInjection
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase

@if (isLoading)
{
    <div class="custom-spinner show-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
<div class="m-2">
    <label>Fitler </label>
    <select @onchange="FilterOnHouse" >
        <option value="0">House</option>
        @if(Houses.Any())
        {
            @foreach (var house in Houses)
            {
                <option value="@house.HouseId">@house.Name</option>
            }
        }
     </select>

     <select @onchange="FilterOnZipCode" >
        <option value="0">City</option>
        @if(Houses.Any())
        {
            @foreach (var zipCode in ZipCodes)
            {
                <option value="@zipCode.ZipCodeId">@zipCode.City</option>
            }
        }
     </select>

     <select @onchange="FilterOnAvailbale" >
        <option value="">Avilable</option>
        <option value="ASC">ASC</option>
        <option value="DESC">DESC</option>
     </select>
</div>
<div class="custom-container" style="margin-top: 20px">
    @if (SortedRooms.Any())
    {
        @foreach (Room room in SortedRooms)
        {
            int roomId = room.RoomId;
            var carouselId = ModalHelper.GetCarouselId(roomId);
            var modalCarouselId = ModalHelper.GetModalCarouselId(roomId);
            var modalId = ModalHelper.GetModalId(roomId);
            <div class="card" style="width: 18rem;">
              <div class="card-img-top">
                  @if (room.RoomImages.Any())
                    {
                        <div>
                            <div id="@carouselId" class="carousel slide col-12 p-0" data-ride="@modalCarouselId">
                                <ol class="carousel-indicators">
                                    <li data-target="#@carouselId" data-slide-to="0" class="active"></li>
                                    @for(int i = 1; i < room.RoomImages.Count(); i++)
                                    {
                                        <li data-target="#@carouselId" data-slide-to="@i"></li>
                                    }
                                </ol>
                                <div class="carousel-inner">
                                    @{var teller3 = 0;}
                                    @foreach (var image in room.RoomImages)
                                    {
                                        var img = "/images/Room/" + (image.Path ?? "default_room.jpg");
                                        var activeClass = "";
                                        if (teller3 == 0)
                                        {
                                            activeClass = "active";
                                        }
                                        <div style="cursor:pointer;" class="carousel-item @activeClass" data-toggle="modal" data-target="#@modalId.ToUpper()">
                                            <div data-target="#@modalCarouselId" data-slide-to=@teller3  class="custom-background" style="cursor:pointer; height: 30vh; background-image : url('@img')"></div>
                                        </div>
                                        teller3++;

                                    }
                                </div>
                                <a class="carousel-control-prev" href="#@carouselId" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#@carouselId" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                        </div>
                    }
                    else
                    {

                        <div style="cursor:pointer; height: 30vh; background-image : url('/images/Room/default_room.jpg');background-position: center;background-size: cover;">

                        </div>
                    }
              </div>
              <div class="card-body">
                    <div class="media">
                        <div class="media-body">
                            <div class="d-flex justify-content-between" style="min-width: 200px">
                                <p>@room.House.StreetName</p>
                                <p>@room.Price€</p>
                            </div>
                            <div class="d-flex justify-content-between" style="min-width: 200px">
                                <p>@room.House.ZipCode.City</p>
                                <p>@room.Surface (2m)</p>
                            </div>
                        </div>
                    </div>
                    @if(!IsNormalUser)
                    {
                         <div>
                            <a @onclick="() => EditRoom(room.RoomId)" class="btn btn-primary" style="cursor:pointer">Edit</a>
                            <a @onclick="() => DetailsRoom(room.RoomId)" class="btn btn-info" style="cursor:pointer">Details</a>
                            <a @onclick="() => DeleteRoom(room.RoomId)" class="btn btn-danger" style="cursor:pointer">Delete</a>
                        </div>
                    }
                     else
                    {
                        <div>
                            <a @onclick="() => DetailsRoom(room.RoomId)" class="btn btn-info" style="cursor:pointer">Details</a>
                        </div>
                    }
              </div>
            </div>

            <div class="modal fade" id="@modalId.ToUpper()" tabindex="-1" role="dialog" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                           <button type="button" class="close default-transition" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true"><i class="fa-solid fa-xmark text-white "></i></span>
                            </button>
                        </div>
                        <div class="modal-body">

                            <div id="@modalCarouselId" class="carousel slide text-center" data-ride="@modalCarouselId">
                                <div class="carousel-inner">
                                    @if (room.RoomImages.Any())
                                    {
                                        var teller2 = 0;
                                        foreach (var image in room.RoomImages)
                                        {
                                            var img = "/images/Room/" + (image.Path ?? "default_room.jpg");
                                            var activeClass = "";
                                            if (teller2 == 0)
                                            {
                                                activeClass = "active";
                                            }
                                            <div class="carousel-item @activeClass">
                                                <div class="custom-background" style="background-image: url('@img')"></div>
                                            </div>
                                            teller2++;
                                        }   
                                    }
                                </div>
                                <a class="carousel-control-prev ml-auto" href="#@modalCarouselId" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next mr-auto" href="#@modalCarouselId" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>@message</p>
    }
</div>

@code {
    public IBlazorRepository BlazorRepository => ScopedServices.GetService<IBlazorRepository>();
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ICollection<Room> Rooms = new List<Room>();
    public ICollection<House> Houses = new List<House>();
    public ICollection<Room> SortedRooms = new List<Room>();
    public ICollection<ZipCode> ZipCodes = new List<ZipCode>();
    public bool isLoading { get; set; } = true;
    public string message { get; set; } = "Loading";

    public bool IsNormalUser { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole(Roles.Admin) || user.IsInRole(Roles.Owner))
        {
            IsNormalUser = false;
        }

        Rooms = await BlazorRepository.GetRooms();
        Houses = await BlazorRepository.GetHouses();
        ZipCodes = await BlazorRepository.GetZipCodes();
        SortedRooms = Rooms;
        isLoading = false;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (!SortedRooms.Any())
        {
            message = "No rooms";
        }
    }
    protected void SortRooms()
    {
        isLoading = true;
        var st = Rooms.Where(r => r.RoomId == 1).ToList();
        SortedRooms = st;
        isLoading = false;
    }
    protected  void FilterOnHouse(ChangeEventArgs e)
    {
        isLoading = true;
        int.TryParse(e.Value.ToString(), out int houseId);
        if(houseId == 0)
        {
            SortedRooms = Rooms;
        }
        else
        {
            SortedRooms = Rooms.Where(r => r.HouseId == houseId).ToList();
        }  
        isLoading = false;
    }
    protected  void FilterOnZipCode(ChangeEventArgs e)
    {
        isLoading = true;
        int.TryParse(e.Value.ToString(), out int zipId);
        if(zipId == 0)
        {
            SortedRooms = Rooms;
        }
        else
        {
            SortedRooms = Rooms.Where(r => r.House.ZipCodeId == zipId).ToList();
        }  
        isLoading = false;
    }
    protected  void FilterOnAvailbale(ChangeEventArgs e)
    {
        isLoading = true;
        string avilValue = e.Value.ToString();
        if (avilValue == "ASC")
        {
            SortedRooms = SortedRooms.OrderBy(r => r.AvailableFrom).ToList();
        }
        else if (avilValue == "DESC")
        {
            SortedRooms = SortedRooms.OrderByDescending(r => r.AvailableFrom).ToList();
        }
        else
        {
            SortedRooms = Rooms;
        }  
        isLoading = false;
    }
    // links
    public void EditRoom(int roomId)
    {
        NavigationManager.NavigateTo($"Room/edit/{roomId}", true);
    }
    public void DetailsRoom(int roomId)
    {
        NavigationManager.NavigateTo($"Room/Details/{roomId}", true);
    }
    public void DeleteRoom(int roomId)
    {
        NavigationManager.NavigateTo($"Room/Delete/{roomId}", true);
    }
}
