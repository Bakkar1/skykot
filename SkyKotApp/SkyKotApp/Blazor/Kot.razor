@using Microsoft.Extensions.DependencyInjection
@using System
@using System.IO
@inherits OwningComponentBase

<h3>Rooms</h3>
@if (isLoading)
{
    <div class="custom-spinner show-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
<div>
    <select @onchange="FilterOnHouse" >
        <option value="0">Filter</option>
        @if(Houses.Any())
        {
            @foreach (var house in Houses)
            {
                <option value="@house.HouseId">@house.Name</option>
            }
        }
     </select>

     <select @onchange="FilterOnZipCode" >
        <option value="0">All Zip</option>
        @if(Houses.Any())
        {
            @foreach (var zipCode in ZipCodes)
            {
                <option value="@zipCode.ZipCodeId">@zipCode.City</option>
            }
        }
     </select>
</div>
<div class="custom-container">
    @if (SortedRooms.Any())
    {
        @foreach (Room room in SortedRooms)
        {
            <div class="card" style="width: 18rem;">
              <div class="card-img-top">
                  @if (room.RoomImages.Any())
                    {
                        <div>
                            @{var carouselId = "carousel-" + room.RoomId;}
                            <div id="@carouselId" class="carousel slide col-12 p-0" data-ride="carousel">
                                <div class="carousel-inner">
                                    @{var teller3 = 0;}
                                    @foreach (var image in room.RoomImages)
                                    {
                                        var img = "/images/Room/" + (image.Path ?? "avatar.png");
                                        if (teller3 == 0)
                                        {
                                            <div class="carousel-item active" style="cursor:pointer; height: 30vh; background-image : url('@img');background-position: center;background-size: cover;" data-toggle="modal" data-target="#Modal">
                                            </div>
                                        }
                                        else
                                        {
                                             <div class="carousel-item" style="cursor:pointer; height: 30vh; background-image : url('@img');background-position: center;background-size: cover;" data-toggle="modal" data-target="#Modal">
                                            </div>
                                        }
                                        teller3++;

                                    }
                                </div>
                                <a class="carousel-control-prev" href="#@carouselId" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#@carouselId" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div style="cursor:pointer; height: 20vh">
                            <img class="d-block" style="max-height: 100%; width:100%" src="/images/Profile/avatar.png">
                        </div>
                    }
              </div>

              <div class="card-body">
                <h5 class="card-title m2">@room.House.Name Price</h5>
                <p class="card-text">City </p>
              </div>
            </div>
        }
    }
    else
    {
        <p>No Rooms</p>
    }
</div>

@code {
    public IBlazorRepository BlazorRepository => ScopedServices.GetService<IBlazorRepository>();
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ICollection<Room> Rooms = new List<Room>();
    public ICollection<House> Houses = new List<House>();
    public ICollection<Room> SortedRooms = new List<Room>();
    public ICollection<ZipCode> ZipCodes = new List<ZipCode>();
    public bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        Rooms = await BlazorRepository.GetRooms();
        Houses = await BlazorRepository.GetHouses();
        ZipCodes = await BlazorRepository.GetZipCodes();
        SortedRooms = Rooms;
        isLoading = false;
    }
    protected void SortRooms()
    {
        isLoading = true;
        var st = Rooms.Where(r => r.RoomId == 1).ToList();
        SortedRooms = st;
        isLoading = false;
    }
    protected  void FilterOnHouse(ChangeEventArgs e)
    {
        isLoading = true;
        int.TryParse(e.Value.ToString(), out int houseId);
        if(houseId == 0)
        {
            SortedRooms = Rooms;
        }
        else
        {
            SortedRooms = Rooms.Where(r => r.HouseId == houseId).ToList();
        }  
        isLoading = false;
    }
    protected  void FilterOnZipCode(ChangeEventArgs e)
    {
        isLoading = true;
        int.TryParse(e.Value.ToString(), out int zipId);
        if(zipId == 0)
        {
            SortedRooms = Rooms;
        }
        else
        {
            SortedRooms = Rooms.Where(r => r.House.ZipCodeId == zipId).ToList();
        }  
        isLoading = false;
    }
}
